//*****************************************************************************
//*****************************************************************************
//  FILENAME:  serial_uart.h
//  Version: 5.2, Updated on 2009/10/23 at 10:13:12
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION:  UART User Module C Language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

// include the global header file
#include <m8c.h>

#define serial_uart_RXBUF_ENABLE 0

//-------------------------------------------------
// Prototypes of the serial_uart API.
//-------------------------------------------------

#if ( serial_uart_RXBUF_ENABLE )
extern char serial_uart_aRxBuffer[];
extern BYTE serial_uart_bRxCnt;
extern BYTE serial_uart_fStatus;
#endif



// Create pragmas to support proper argument and return value passing

#pragma fastcall16  serial_uart_SetTxIntMode
#pragma fastcall16  serial_uart_EnableInt
#pragma fastcall16  serial_uart_DisableInt
#pragma fastcall16  serial_uart_Start
#pragma fastcall16  serial_uart_Stop
#pragma fastcall16  serial_uart_SendData
#pragma fastcall16  serial_uart_bReadTxStatus
#pragma fastcall16  serial_uart_bReadRxData
#pragma fastcall16  serial_uart_bReadRxStatus
#pragma fastcall16  serial_uart_PutSHexByte
#pragma fastcall16  serial_uart_PutSHexInt
#pragma fastcall16  serial_uart_CPutString
#pragma fastcall16  serial_uart_PutString
#pragma fastcall16  serial_uart_PutChar
#pragma fastcall16  serial_uart_Write
#pragma fastcall16  serial_uart_CWrite

#pragma fastcall16  serial_uart_cGetChar
#pragma fastcall16  serial_uart_cReadChar
#pragma fastcall16  serial_uart_iReadChar
#pragma fastcall16  serial_uart_IntCntl
#pragma fastcall16  serial_uart_TxIntMode
#pragma fastcall16  serial_uart_PutCRLF

#if ( serial_uart_RXBUF_ENABLE )
#pragma fastcall16  serial_uart_CmdReset
#pragma fastcall16  serial_uart_bCmdCheck
#pragma fastcall16  serial_uart_bErrCheck
#pragma fastcall16  serial_uart_bCmdLength
#pragma fastcall16  serial_uart_szGetParam
#pragma fastcall16  serial_uart_szGetRestOfParams
#endif

//**************************************************
// Prototypes of UART API.
//**************************************************
extern void  serial_uart_SetTxIntMode(BYTE bTxIntMode);
extern void  serial_uart_EnableInt(void);
extern void  serial_uart_DisableInt(void);
extern void  serial_uart_Start(BYTE bParitySetting);
extern void  serial_uart_Stop(void);
extern void  serial_uart_SendData(BYTE bTxData);
extern BYTE  serial_uart_bReadTxStatus(void);
extern BYTE  serial_uart_bReadRxData(void);
extern BYTE  serial_uart_bReadRxStatus(void);

// High level TX functions
extern void   serial_uart_CPutString(const BYTE * szRomString);
extern void   serial_uart_PutString(BYTE * szRamString);
extern void   serial_uart_PutChar(CHAR cData);
extern void   serial_uart_Write(BYTE * szRamString, BYTE bCount);
extern void   serial_uart_CWrite(const BYTE * szRomString, INT iCount);
extern void   serial_uart_PutSHexByte(BYTE bValue);
extern void   serial_uart_PutSHexInt(INT iValue);
extern void   serial_uart_PutCRLF(void);
extern void   serial_uart_TxIntMode(BYTE bMask);

// High level RX functions
extern CHAR   serial_uart_cGetChar(void);
extern CHAR   serial_uart_cReadChar(void);
extern INT    serial_uart_iReadChar(void);
extern void   serial_uart_IntCntl(BYTE bMask);

#if ( serial_uart_RXBUF_ENABLE )
extern void   serial_uart_CmdReset(void);
extern BYTE   serial_uart_bCmdCheck(void);
extern BYTE   serial_uart_bErrCheck(void);
extern BYTE   serial_uart_bCmdLength(void);
extern BYTE * serial_uart_szGetParam(void);
extern BYTE * serial_uart_szGetRestOfParams(void);
#endif

//-------------------------------------------------
// Defines for serial_uart API's.
//-------------------------------------------------



//------------------------------------
//  Parity masks
//------------------------------------
#define  serial_uart_PARITY_NONE        0x00
#define  serial_uart_PARITY_EVEN        0x02
#define  serial_uart_PARITY_ODD         0x06
//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  serial_uart_TX_COMPLETE        0x20
#define  serial_uart_TX_BUFFER_EMPTY    0x10

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  serial_uart_RX_ACTIVE          0x10
#define  serial_uart_RX_COMPLETE        0x08
#define  serial_uart_RX_REG_FULL        0x08
#define  serial_uart_RX_PARITY_ERROR    0x80
#define  serial_uart_RX_OVERRUN_ERROR   0x40
#define  serial_uart_RX_FRAMING_ERROR   0x20
#define  serial_uart_RX_ERROR           0xE0
#define  serial_uart_RX_NO_ERROR        0xE0          // This symbol is deprecated and will removed in the future

#define  serial_uart_RX_NO_DATA         0x01

#define  serial_uart_RX_BUF_ERROR         0xF0  // Mask for any Rx that may occur.
#define  serial_uart_RX_BUF_OVERRUN       0x10  // This indicates the software buffer has
                                                           // been over run.
#define  serial_uart_RX_BUF_CMDTERM       0x01  // Command terminator has been received.

// Interrupt control used with  serial_uart_IntCntl() function
#define serial_uart_ENABLE_RX_INT  0x01
#define serial_uart_ENABLE_TX_INT  0x02
#define serial_uart_DISABLE_RX_INT 0x00
#define serial_uart_DISABLE_TX_INT 0x00

// Interrupt Modes
#define serial_uart_INT_MODE_TX_REG_EMPTY 0x00
#define serial_uart_INT_MODE_TX_COMPLETE  0x01

//-------------------------------------------------
// Register Address Constants for serial_uart
//-------------------------------------------------

#pragma ioport  serial_uart_TX_CONTROL_REG: 0x04b           // Control register
BYTE            serial_uart_TX_CONTROL_REG;
#pragma ioport  serial_uart_TX_SHIFT_REG:   0x048               // TX Shift Register register
BYTE            serial_uart_TX_SHIFT_REG;
#pragma ioport  serial_uart_TX_BUFFER_REG:  0x049               // TX Buffer Register
BYTE            serial_uart_TX_BUFFER_REG;
#pragma ioport  serial_uart_TX_FUNC_REG:    0x148           // Function register
BYTE            serial_uart_TX_FUNC_REG;
#pragma ioport  serial_uart_TX_INPUT_REG:   0x149           // Input register
BYTE            serial_uart_TX_INPUT_REG;
#pragma ioport  serial_uart_TX_OUTPUT_REG:  0x14a           // Output register
BYTE            serial_uart_TX_OUTPUT_REG;
#pragma ioport  serial_uart_RX_CONTROL_REG: 0x04f           // Control register
BYTE            serial_uart_RX_CONTROL_REG;
#pragma ioport  serial_uart_RX_SHIFT_REG:   0x04c               // RX Shift Register register
BYTE            serial_uart_RX_SHIFT_REG;
#pragma ioport  serial_uart_RX_BUFFER_REG:  0x04e               // RX Buffer Register
BYTE            serial_uart_RX_BUFFER_REG;
#pragma ioport  serial_uart_RX_FUNC_REG:    0x14c           // Function register
BYTE            serial_uart_RX_FUNC_REG;
#pragma ioport  serial_uart_RX_INPUT_REG:   0x14d           // Input register
BYTE            serial_uart_RX_INPUT_REG;
#pragma ioport  serial_uart_RX_OUTPUT_REG:  0x14e           // Output register
BYTE            serial_uart_RX_OUTPUT_REG;

#pragma ioport  serial_uart_TX_INT_REG:       0x0df        // TX Interrupt Mask Register
BYTE            serial_uart_TX_INT_REG;
#pragma ioport  serial_uart_RX_INT_REG:       0x0df        // RX Interrupt Mask Register
BYTE            serial_uart_RX_INT_REG;

// Masks to use with serial_uart_TX_INT_REG and serial_uart_RX_INT_REG Registers
#define serial_uart_TX_INT_MASK         (0x04) // TX Interrupt register Mask
#define serial_uart_RX_INT_MASK         (0x08) // RX Interrupt register Mask


//-------------------------------------------
//       WARNING WARNING WARNING
// The following defines and function prototypes
// are for backwards compatibility only and
// should not be used for new designs.
//-------------------------------------------
#pragma fastcall16  bserial_uart_ReadTxStatus
#pragma fastcall16  bserial_uart_ReadRxData
#pragma fastcall16  bserial_uart_ReadRxStatus
extern BYTE  bserial_uart_ReadTxStatus(void);
extern BYTE  bserial_uart_ReadRxData(void);
extern BYTE  bserial_uart_ReadRxStatus(void);
//------------------------------------
//  Parity masks
//------------------------------------
#define  UART_PARITY_NONE        0x00
#define  UART_PARITY_EVEN        0x02
#define  UART_PARITY_ODD         0x06

//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  UART_TX_COMPLETE        0x20
#define  UART_TX_BUFFER_EMPTY    0x10

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  UART_RX_ACTIVE          0x10
#define  UART_RX_COMPLETE        0x08
#define  UART_RX_PARITY_ERROR    0x80
#define  UART_RX_OVERRUN_ERROR   0x40
#define  UART_RX_FRAMING_ERROR   0x20
#define  UART_RX_NO_ERROR        0xE0

//-------------------------------------------
//             END WARNING
//-------------------------------------------
// end of file serial_uart.h
