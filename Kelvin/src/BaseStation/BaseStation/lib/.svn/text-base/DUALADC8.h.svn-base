//*****************************************************************************
//*****************************************************************************
//  FILENAME: DUALADC8.h
//   Version: 1.1, Updated on 2009/10/9 at 10:6:29
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION: DualADC8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8C.h>

//-------------------------------------------------
// Constants for DUALADC8 API's.
//-------------------------------------------------
//
// Power Setting Constants
#define DUALADC8_OFF            0
#define DUALADC8_LOWPOWER       1
#define DUALADC8_MEDPOWER       2
#define DUALADC8_HIGHPOWER      3

// Function fastcall16 Pragmas
#pragma fastcall16 DUALADC8_Start
#pragma fastcall16 DUALADC8_SetPower
#pragma fastcall16 DUALADC8_GetSamples
#pragma fastcall16 DUALADC8_StopAD
#pragma fastcall16 DUALADC8_Stop
#pragma fastcall16 DUALADC8_fIsData
#pragma fastcall16 DUALADC8_fIsDataAvailable
#pragma fastcall16 DUALADC8_cGetData1
#pragma fastcall16 DUALADC8_cGetData1ClearFlag
#pragma fastcall16 DUALADC8_cGetData2
#pragma fastcall16 DUALADC8_cGetData2ClearFlag
#pragma fastcall16 DUALADC8_ClearFlag
#pragma fastcall16 DUALADC8_SetCalcTime

//-------------------------------------------------
// Prototypes of the DUALADC8 API.
//-------------------------------------------------
extern void DUALADC8_Start(BYTE bPower);
extern void DUALADC8_SetPower(BYTE bPower);
extern void DUALADC8_GetSamples(void);
extern void DUALADC8_StopAD(void);
extern void DUALADC8_Stop(void);
extern CHAR DUALADC8_fIsData(void);
extern CHAR DUALADC8_fIsDataAvailable(void);
extern char DUALADC8_cGetData1(void);
extern char DUALADC8_cGetData2(void);
extern char DUALADC8_cGetData1ClearFlag(void);
extern char DUALADC8_cGetData2ClearFlag(void);
extern void DUALADC8_ClearFlag(void);
extern void DUALADC8_SetCalcTime(int iCalcTime);

//-------------------------------------------------
// Register Addresses for DUALADC8
//-------------------------------------------------
// ADC1 Integrator Block Register Definitions
#pragma ioport  DUALADC8_bfADC1cr0: 0x090
BYTE            DUALADC8_bfADC1cr0;
#pragma ioport  DUALADC8_bfADC1cr1: 0x091
BYTE            DUALADC8_bfADC1cr1;
#pragma ioport  DUALADC8_bfADC1cr2: 0x092
BYTE            DUALADC8_bfADC1cr2;
#pragma ioport  DUALADC8_bfADC1cr3: 0x093
BYTE            DUALADC8_bfADC1cr3;

// ADC2 Integrator Block Register Definitions
#pragma ioport  DUALADC8_bfADC2cr0: 0x098
BYTE            DUALADC8_bfADC2cr0;
#pragma ioport  DUALADC8_bfADC2cr1: 0x099
BYTE            DUALADC8_bfADC2cr1;
#pragma ioport  DUALADC8_bfADC2cr2: 0x09a
BYTE            DUALADC8_bfADC2cr2;
#pragma ioport  DUALADC8_bfADC2cr3: 0x09b
BYTE            DUALADC8_bfADC2cr3;

// Counter Block Register Definitions
#pragma ioport  DUALADC8_fCounter1FN:   0x130
BYTE            DUALADC8_fCounter1FN;
#pragma ioport  DUALADC8_fCounter1SL:   0x131
BYTE            DUALADC8_fCounter1SL;
#pragma ioport  DUALADC8_fCounter1OS:   0x132
BYTE            DUALADC8_fCounter1OS;
#pragma ioport  DUALADC8_bCount1:   0x030
BYTE            DUALADC8_bCount1;
#pragma ioport  DUALADC8_bPeriod1:  0x031
BYTE            DUALADC8_bPeriod1;
#pragma ioport  DUALADC8_bCompare1: 0x032
BYTE            DUALADC8_bCompare1;
#pragma ioport  DUALADC8_bCounter1_CR0: 0x033
BYTE            DUALADC8_bCounter1_CR0;

// Counter Block Register Definitions
#pragma ioport  DUALADC8_fCounter2FN:   0x134
BYTE            DUALADC8_fCounter2FN;
#pragma ioport  DUALADC8_fCounter2SL:   0x135
BYTE            DUALADC8_fCounter2SL;
#pragma ioport  DUALADC8_fCounter2OS:   0x136
BYTE            DUALADC8_fCounter2OS;
#pragma ioport  DUALADC8_bCount2:   0x034
BYTE            DUALADC8_bCount2;
#pragma ioport  DUALADC8_bPeriod2:  0x035
BYTE            DUALADC8_bPeriod2;
#pragma ioport  DUALADC8_bCompare2: 0x036
BYTE            DUALADC8_bCompare2;
#pragma ioport  DUALADC8_bCounter2_CR0: 0x037
BYTE            DUALADC8_bCounter2_CR0;

// PWM16 Block Register Definitions
#pragma ioport  DUALADC8_bfPWM_LSB_FN:  0x138
BYTE            DUALADC8_bfPWM_LSB_FN;
#pragma ioport  DUALADC8_bfPWM_MSB_FN:  0x13c
BYTE            DUALADC8_bfPWM_MSB_FN;
#pragma ioport  DUALADC8_fPWM_LSB_CR0:  0x03b
BYTE            DUALADC8_fPWM_LSB_CR0;
#pragma ioport  DUALADC8_fPWM_MSB_CR0:  0x03f
BYTE            DUALADC8_fPWM_MSB_CR0;
#pragma ioport  DUALADC8_bPWM_Count_MSB:    0x03c
BYTE            DUALADC8_bPWM_Count_MSB;
#pragma ioport  DUALADC8_bPWM_Count_LSB:    0x038
BYTE            DUALADC8_bPWM_Count_LSB;
#pragma ioport  DUALADC8_bPWM_Period_MSB:   0x03d
BYTE            DUALADC8_bPWM_Period_MSB;
#pragma ioport  DUALADC8_bPWM_Period_LSB:   0x039
BYTE            DUALADC8_bPWM_Period_LSB;
#pragma ioport  DUALADC8_bPWM_IntTime_MSB:  0x03e
BYTE            DUALADC8_bPWM_IntTime_MSB;
#pragma ioport  DUALADC8_bPWM_IntTime_LSB:  0x03a
BYTE            DUALADC8_bPWM_IntTime_LSB;
#pragma ioport  DUALADC8_bfPWM_LSB_FN:  0x138
BYTE            DUALADC8_bfPWM_LSB_FN;
#pragma ioport  DUALADC8_bfPWM_MSB_FN:  0x13c
BYTE            DUALADC8_bfPWM_MSB_FN;

// end of file DUALADC8.h
